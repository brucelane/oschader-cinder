#version 430
#extension GL_ARB_compute_shader : enable
#extension GL_ARB_shader_storage_buffer_object : enable

#define WORK_GROUP_SIZE 128

uniform float i_delta;
uniform float i_time;
uniform float i_lastUpdate;
uniform float i_emitterX;
uniform float i_emitterY;
uniform float i_emitterZ;
uniform float i_emitVelX;
uniform float i_emitVelY;
uniform float i_emitVelZ;
uniform float i_lifespan;
uniform float numParticles;
uniform int i_rotation;
uniform int i_timeRot;

layout( std140, binding = 1 ) buffer Pos {
	vec4 pos[];
};

layout( std140, binding = 2 ) buffer Vel {
	vec4 vel[];
};

layout( local_size_x = WORK_GROUP_SIZE,  local_size_y = 1, local_size_z = 1 ) in;

float mod289(float x){return x - floor(x * (1.0 / 289.0)) * 289.0;}
vec4 mod289(vec4 x){return x - floor(x * (1.0 / 289.0)) * 289.0;}
vec4 perm(vec4 x){return mod289(((x * 34.0) + 1.0) * x);}

float noise(vec3 p){
    vec3 a = floor(p);
    vec3 d = p - a;
    d = d * d * (3.0 - 2.0 * d);

    vec4 b = a.xxyy + vec4(0.0, 1.0, 0.0, 1.0);
    vec4 k1 = perm(b.xyxy);
    vec4 k2 = perm(k1.xyxy + b.zzww);

    vec4 c = k2 + a.zzzz;
    vec4 k3 = perm(c);
    vec4 k4 = perm(c + 1.0);

    vec4 o1 = fract(k3 * (1.0 / 41.0));
    vec4 o2 = fract(k4 * (1.0 / 41.0));

    vec4 o3 = o2 * d.z + o1 * (1.0 - d.z);
    vec2 o4 = o3.yw * d.x + o3.xz * (1.0 - d.x);

    return o4.y * d.y + o4.x * (1.0 - d.y);
}

void main() {
	uint i = gl_GlobalInvocationID.x;

	if( i >= numParticles )
	{
		return;
	}

	float iPos = float(i) / numParticles;
	vec3 velocity = vel[i].xyz;
	vec3 position = pos[i].xyz + velocity.xyz;
	float alpha = pos[i].w;
	float nAngleXY = noise(vec3(position.xy, i_time)) * 15.0f;
	float nAngleXZ = noise(vec3(position.xz, i_time)) * 15.0f;
	float nAngleYZ = noise(vec3(position.yz, i_time)) * 15.0f;
	float rotTime = (i_time + float(i_timeRot % 8)) / 8.0f;
	float lastRotTime = (i_lastUpdate + float(i_timeRot % 8)) / 8.0f;
	float delta = mod(rotTime - lastRotTime, 1);
	if(iPos < rotTime && iPos > lastRotTime && alpha < 0.1) {
		alpha = i_lifespan;
		position.x = i_emitterX + cos(nAngleXY) * nAngleYZ * 0.1;
		position.y = i_emitterY + sin(nAngleXY) * nAngleYZ * 0.1;
		position.z = i_emitterZ + cos(nAngleXZ) * 0.1;
		velocity = vec3(i_emitVelX, i_emitVelY, i_emitVelZ);
	}
	else {
		velocity *= 0.995;
		velocity += vec3(cos(nAngleXY) * sin(nAngleXZ), cos(nAngleXY) * sin(nAngleYZ), cos(nAngleXZ) * sin(nAngleYZ)) * 0.003 * (1.0f - alpha);
	}

	alpha -= max(i_time - i_lastUpdate, 0);
	alpha = max(0, alpha);
	pos[i] = vec4(position, alpha);
	vel[i] = vec4(velocity.xyz, 0);
}
